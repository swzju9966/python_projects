# coding=gbk
import sys
from time import sleep

import pygame

from bullet import Bullet
from alien import Alien

'''def check_events(ship):
	''''''响应按键和鼠标事件''''''
	for event in pygame.event.get():
			 if event.type == pygame.QUIT:
				 sys.exit()
			 elif event.type ==pygame.KEYDOWN:
				 if event.key == pygame.K_RIGHT:
					# 向右移动飞船
					 ''''''ship.rect.centerx += 1''''''
					 ship.moving_right = True
				 elif event.key == pygame.K_LEFT:
					 ship.moving_left = True
			 elif event.type ==pygame.KEYUP:
				 if event.key == pygame.K_RIGHT:
					 ship.moving_right = False
				 elif event.key == pygame.K_LEFT:
					 ship.moving_left = False
'''
def check_keydown_events(event,ai_settings,screen,ship,bullets):
	'''响应按键'''	
	if event.key == pygame.K_RIGHT:
		ship.moving_right = True
	if event.key == pygame.K_LEFT:
		ship.moving_left = True
	elif event.key == pygame.K_SPACE:
		# 创建新子弹并将其加入编组中
		fire_bullet(ai_settings,screen,ship,bullets)
		    #if len(bullets) < ai_settings.bullets_allowed:
				#new_bullet = Bullet(ai_settings,screen,ship)
				#bullets.add(new_bullet) 
	# 结束游戏的快捷键
	elif event.key == pygame.K_q:
		sys.exit()
		
def check_keyup_events(event,ship):
	'''响应放开'''
	if event.key == pygame.K_RIGHT:
		ship.moving_right = False
	elif event.key == pygame.K_LEFT:
		ship.moving_left = False

def check_events(ai_settings,screen,ship,bullets,stats,play_button,
	aliens):
	'''响应按键和鼠标事件'''
	for event in pygame.event.get():
			 if event.type == pygame.QUIT:
				 sys.exit()
			 elif event.type == pygame.KEYDOWN:
				 check_keydown_events(event,ai_settings,screen,ship,bullets)
			 elif event.type == pygame.KEYUP:
				 check_keyup_events(event,ship)
			 elif event.type == pygame.MOUSEBUTTONDOWN:
				 mouse_x,mouse_y = pygame.mouse.get_pos()
				 check_play_button(ai_settings,screen,stats,play_button,
				 ship,aliens,bullets,mouse_x,mouse_y)
				 
def check_play_button(ai_settings,screen,stats,play_button,ship,aliens,
	bullets,mouse_x,mouse_y):
	'''在玩家单击play按钮时开始游戏'''
	if play_button.rect.collidepoint(mouse_x,mouse_y):
		# 重置游戏信息
		stats.reset_stats()
		stats.game_active = True 
		
		# 清空外星人列表和子弹列表
		aliens.empty()
		bullets.empty()
		
		# 创建一群新的外星人，并让飞船居中
		create_fleet(ai_settings,screen,aliens,ship)
		ship.center_ship()
		
				 
				
def update_screen(ai_settings,screen,ship,bullets,aliens,stats,
	play_button):
	'''更新屏幕上的图像，并切换到新屏幕'''
	# 每次循环时都重绘屏幕
	screen.fill(ai_settings.bg_color)
	# 在飞船和外星人后面重绘所有子弹
	for bullet in bullets.sprites():
		bullet.draw_bullet()
	ship.blitme()
	aliens.draw(screen)
	if not stats.game_active:
		play_button.draw_button()
	# 让最近绘制的屏幕可见
	pygame.display.flip()
	
def update_bullets(aliens,bullets,ai_settings,screen,ship):
	'''更新子弹的位置，并删除已经消失的子弹'''
	# 更新子弹的位置
	bullets.update()
	# 删除已消失的子弹
	for bullet in bullets.copy():
		if bullet.rect.bottom <= 0:
			bullets.remove(bullet)
	check_bullet_alien_collisions(aliens,bullets,ai_settings,screen,ship)

def check_bullet_alien_collisions(aliens,bullets,ai_settings,screen,ship):
	'''相应子弹和外星人的碰撞'''
	collisions = pygame.sprite.groupcollide(bullets,aliens,True,True)
	# 检查是否有子弹击中了外星人
	# 如果是这样，就删除相应的子弹和外星人，返回一个字典
	#collisions = pygame.sprite.groupcollide(bullets,aliens,True,True)
	if len(aliens) == 0:
		# 删除现有的子弹并新建一群外星人
		bullets.empty()
		create_fleet(ai_settings,screen,aliens,ship)
		
	
			
	
			
def fire_bullet(ai_settings,screen,ship,bullets):
	if len(bullets) < ai_settings.bullets_allowed:
			new_bullet = Bullet(ai_settings,screen,ship)
			bullets.add(new_bullet)
			
def get_number_aliens_x(ai_settings,alien_width):
	'''计算一行可以容纳多少个外星人'''
	available_space_x = ai_settings.screen_width - 2 * alien_width
	number_aliens_x = int(available_space_x / (2 * alien_width))
	return number_aliens_x

def get_number_rows(ai_settings,ship_height,alien_height):
	'''计算屏幕可容纳多少行外星人'''
	available_space_y = (ai_settings.screen_height - ship_height-
	(3 * alien_height))
	number_rows = int(available_space_y / (2 * alien_height))
	return number_rows
	
def create_alien(ai_settings,screen,aliens,alien_number,row_number):
	'''创建一个外星人并将其加入当前行'''
	alien = Alien(ai_settings,screen)
	alien_width = alien.rect.width
	alien.x = alien_width + 2 * alien_width * alien_number
	alien.rect.x = alien.x
	alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
	aliens.add(alien)
	
def create_fleet(ai_settings,screen,aliens,ship):
	'''创建外星人群'''
	# 创建一个外星人，并计算一行可以容纳多少个外星人
	# 外星人间距为外星人宽度
	alien = Alien(ai_settings,screen)
	number_aliens_x = get_number_aliens_x(ai_settings,alien.rect.width)
	number_rows = get_number_rows(ai_settings,ship.rect.height,
	alien.rect.height)
	#alien_width = alien.rect.width
	#available_space_x = ai_settings.screen_width - 2 * alien_width
	#number_aliens_x = int(available_space_x / (2 * alien_width))
	
	# 创建一行外星人
	#'''for alien_number in range(number_aliens_x):'''
		 #创建一个外星人并将其加入当前行
		 #'''create_alien(ai_settings,screen,aliens,alien_number)'''
		#alien = Alien(ai_settings,screen)
		#alien.x = alien_width + 2 * alien_width * alien_number
		#alien.rect.x = alien.x
		#aliens.add(alien)
		
		
	# 创建外星人群
	for row_number in range(number_rows):
		for alien_number in range(number_aliens_x):
			create_alien(ai_settings,screen,aliens,alien_number,
			row_number)
			
def change_fleet_direction(ai_settings,aliens):
	'''将整群外星人下移，并改变他们的方向'''
	for alien in aliens.sprites():
		alien.rect.y += ai_settings.fleet_drop_speed
	ai_settings.fleet_direction *= -1	
	
def check_fleet_edges(ai_settings,aliens):
	'''有外星人到达边缘时采取相应的措施'''
	for alien in aliens.sprites():
		if alien.check_edges():
			change_fleet_direction(ai_settings,aliens)
			break
	
def ship_hit(ai_settings,aliens,ship,bullets,stats,screen):
	'''响应被外星人撞到的飞船'''
	if stats.ships_left > 0:
		
	# 将 ships_left减1
		stats.ships_left -= 1
	# 清空外星人列表和子弹列表
		aliens.empty()
		bullets.empty()
	# 创建一群新的外星人
		create_fleet(ai_settings,screen,aliens,ship)
		ship.center_ship()
	# 暂停0.5s
		sleep(0.5)
	else:
		stats.game_active = False			
			
def check_aliens_bottom(ai_settings,aliens,ship,bullets,stats,screen):
	'''检查是否有外星人到了屏幕低端'''
	screen_rect = screen.get_rect()
	for alien in aliens.sprites():
		if alien.rect.bottom >= screen_rect.bottom:
			# 像飞船一样被处理
			ship_hit(ai_settings,aliens,ship,bullets,stats,screen)
			break
			
		
def update_aliens(ai_settings,aliens,ship,bullets,stats,screen):
	'''检查是否有外星人位于屏幕边缘并更新外星人群中所有外星人的位置'''
	check_fleet_edges(ai_settings,aliens)
	aliens.update()	
	
	# 检测外星人和飞船之间的碰撞
	if pygame.sprite.spritecollideany(ship,aliens):
		ship_hit(ai_settings,aliens,ship,bullets,stats,screen)
	# 检查是否有外星人到达屏幕低端
	check_aliens_bottom(ai_settings,aliens,ship,bullets,stats,screen)
	
		
		

		


	
		

		
	
		
